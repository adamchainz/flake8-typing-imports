#!/usr/bin/env python3
import argparse
import ast
import re
import subprocess
from typing import Set
from typing import Tuple

TAG_RE = re.compile(r'^v[0-9.]+$')


class Visitor(ast.NodeVisitor):
    def __init__(self) -> None:
        self.symbols: Set[str] = set()

    def visit_Assign(self, node: ast.Assign) -> None:
        if (
                len(node.targets) == 1 and
                isinstance(node.targets[0], ast.Name) and
                node.targets[0].id == '__all__'
        ):
            self.symbols.update(ast.literal_eval(node.value))
            self.symbols -= {'re', 'io'}

        self.generic_visit(node)


def get_tag_list(repo: str) -> Tuple[str, ...]:
    subprocess.check_call(('git', '-C', repo, 'fetch', '-q', '--tags'))
    out = subprocess.check_output(('git', '-C', repo, 'tag', '--list'))
    return tuple(out.decode().splitlines())


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('cpython')
    args = parser.parse_args()

    ret = []
    for tag in get_tag_list(args.cpython):
        if not TAG_RE.match(tag):
            continue
        version = tuple(int(p) for p in tag[1:].split('.'))
        if version < (3, 5):
            continue
        cmd = ('git', '-C', args.cpython, 'show', f'{tag}:Lib/typing.py')
        contents = subprocess.check_output(cmd)
        visitor = Visitor()
        visitor.visit(ast.parse(contents))
        if visitor.symbols is None:
            raise AssertionError(tag)
        ret.append((version, visitor.symbols))

    print('SYMBOLS = (')
    for version, symbols_set in sorted(ret):
        symbols = sorted(symbols_set)
        print('    (')
        vstr = ', '.join(str(p) for p in version)
        print(f'        Version({vstr}), frozenset((')
        accum = f'            {symbols[0]!r},'
        for symbol in symbols[1:]:
            if len(accum) + len(repr(symbol)) + 2 < 80:
                accum += f' {symbol!r},'
            else:
                print(accum)
                accum = f'            {symbol!r},'
        print(accum)
        print('        )),')
        print('    ),')
    print(')')

    return 0


if __name__ == '__main__':
    exit(main())
